// Code generated by ogen, DO NOT EDIT.

package api

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// CreateTask implements createTask operation.
	//
	// Create a task.
	//
	// POST /tasks
	CreateTask(ctx context.Context, req *TaskForCreate) error
	// DeleteTask implements deleteTask operation.
	//
	// Delete a task.
	//
	// DELETE /tasks/{id}
	DeleteTask(ctx context.Context, params DeleteTaskParams) error
	// GetTasks implements getTasks operation.
	//
	// Get all tasks.
	//
	// GET /tasks
	GetTasks(ctx context.Context) ([]Task, error)
	// PartiallyUpdateTask implements partiallyUpdateTask operation.
	//
	// Partially update a task.
	//
	// PATCH /tasks
	PartiallyUpdateTask(ctx context.Context, req *Task) error
	// UpdateTask implements updateTask operation.
	//
	// Update a task.
	//
	// PUT /tasks
	UpdateTask(ctx context.Context, req *Task) error
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h Handler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		baseServer: s,
	}, nil
}
